[alias]
b   = branch
bl  = for-each-ref -s --format '%(refname:short)' refs/heads/
br  = branch -r
c   = checkout
cb  = checkout --conflict=merge
ci  = commit
cm  = commit -m
cn  = checkout --track -b
cp  = cherry-pick
d   = diff
df  = !git log --format='%h %s' @{u}.. -- $(git dsn)
dn  = diff --name-only
ds  = diff --staged
dsn = diff --staged --name-only
du  = ls-files -o --exclude-standard
f   = fetch --no-tags
fr  = "!f() { local BRANCH=${1-$(git current)}; git f origin \"$BRANCH\" && git rebase $(git merge-base FETCH_HEAD \"${BRANCH}\") --onto FETCH_HEAD; }; f"
is  = ![ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1
l   = log --graph --pretty=line @{u}..
l1  = log -1
la  = log --graph --pretty=line --all
lg  = log -p
ll  = log --graph --pretty=line
lv  = log --graph --pretty=line @{u}~~..
mb  = "!f() { git update-ref \"refs/heads/$1\" \"${2-HEAD}\"; }; f"
nb  = "!f() { git checkout -tb \"$1\" \"${2-$(git current)}\"; }; f"
nbu = "!f() { git checkout -tb \"$1\" \"${2-@{u\\}}\"; }; f"
p   = add -p
pr  = pull --rebase --no-tags
r   = reset
rc  = rebase --continue
rh  = reset --hard
ri  = rebase --interactive
s   = status -sbu
si  = status -sbu --ignored
sp  = status --porcelain
tr  = "!f() { local BRANCH=${1-$(git current)}; git config --get \"branch.$BRANCH.remote\"; }; f"
u   = checkout @{u}
up  = "!f() { local BRANCH=${1-$(git current)}; local REMOTE=${2-$(git tr \"$BRANCH\")}; git push \"$REMOTE\" \"$BRANCH\"; }; f"
uf  = "!f() { local BRANCH=${1-$(git current)}; local REMOTE=${2-$(git tr \"$BRANCH\")}; git push -f \"$REMOTE\" \"$BRANCH\"; }; f"
x   = "!exec "
z   = "!f() { git r $@ && git c $@; }; f"

alias     = !git config --get-regexp '^alias\\.' | colrm 1 6 | sed 's/[ ]/ = /' | sort
amend     = commit --amend --no-edit
current   = rev-parse --abbrev-ref HEAD
debug     = !GIT_TRACE=1 git
discard   = !git reset --hard && git clean -df
down      = "!f() { local BRANCH=${2-$(git current)}; local REMOTE=${1-$(git tr \"$BRANCH\")}; git pull --ff-only --no-tags \"$REMOTE\" \"$BRANCH\":\"$BRANCH\"; }; f"
edit      = commit --amend --edit
epics     = ls-remote origin refs/heads/epic/ID-*
exec      = "!exec "
fixup     = commit --fixup
git       = !exec git
ign       = ls-files -o -i --exclude-standard
ignore    = "!f() { [ -e .gitignore ] || touch .gitignore; echo \"$@\" >> .gitignore; }; f"
last      = rev-parse --short HEAD
lastco    = checkout @{-1}
move-file = "!f() { [ -f \"$1\" ] || mv \"$2\" \"$1\"; git mv -fk \"$1\" \"$2\"; }; f"
new       = add -N
prune     = !git reflog expire --expire=now --all && git gc --prune=now
range     = "!f() { local BRANCH=\"${1:-$(git current)}\"; local REMOTE=\"${BRANCH}\"\"@{u}\"; local REMOTE=${2-\"$REMOTE\"}; echo $(git merge-base \"$BRANCH\" \"$REMOTE\" | git name-rev --name-only --stdin)..\"$BRANCH\"; }; f"
refresh   = !git store && git c @{u} && git down && git c @{-1} && git rebase && git recover
root      = rev-parse --show-toplevel
search    = log -S
stale     = "!f() { for BRANCH in $(git unmerged); do (git rev-parse --verify --quiet \"$BRANCH\"@{u} > /dev/null 2>&1 && git merge-base --is-ancestor \"$BRANCH\"@{u} \"$BRANCH\") || echo \"$BRANCH\"; done }; f"
start     = !git init . && git commit --allow-empty -m 'Initial commit'
tmpbranch = !git checkout -b "${1-tmp-}$(date -Ins | md5sum | cut -b-8)"
tracked   = "!f() { local BRANCH=${1-$(git current)}; git rev-parse --abbrev-ref --symbolic-full-name \"$BRANCH\"@{u}; }; f"
unchanged = update-index --assume-unchanged
unmerged  = "!f() { git bl | xargs git merge-base --independent ${1:-} | xargs git name-rev --name-only; }; f"

[branch]
autosetupmerge = always

[color]
ui = auto

[color "branch"] 
current = yellow reverse 
local = yellow 
remote = green

[color "diff"] 
frag = magenta bold 
meta = yellow bold 
new = green bold
old = red bold 
whitespace = red reverse

[color "status"] 
added = yellow 
changed = green 
untracked = cyan

[core]
autocrlf = false
excludesfile = ~/.gitexclude
filemode = true
lagallrefupdates = true
safecrlf = true
whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol

[diff]
algorithm = myers
mnemonicprefix = true

[http] 
postBuffer = 524288000 
receivepack = true

[merge]
tool = meld

[mergetool]
prompt = false
keepBackup = false

[mergetool "meld"]
keepbackup = false

[pretty]
line = %C(auto)%h %s%d %C(blue)<%an>%C(green) %ar
simple = %C(auto)%h %s

[push]
default = simple

[pull]
rebase = true

[rebase]
autosquash = true

[rerere]
enabled = true

[user]
name = Username
email = username@subdomain.domain.tld
